#+TITLE: Описание работы движка

* Структура автомата

  Автомат хранит такие основные сущности: текущее состояние (state), множество всех состояний автомата (states), шаблон описывающий работу автомата (template) и дополнительную информацию описывающую текущее состояние среды автомата (data). По мимо этого он может опционально хранить историю состояний.

  Состояние представляет из себя объект типа keyword

** Шаблон автомата

   Поле template содержащее шаблон автомата это hash-map с ключём типа keyword (состояние автомата) и значением типа hash-map (информация о состоянии)
   
   *Пример шаблона:*

#+NAME: Пример шаблона
#+BEGIN_SRC clojure
{:a {...}
 :b {...}}
#+END_SRC
   
***  Информация о состоянии

   Информация о состоянии содержит следующие ключи:

   - *:discription* - содержит текстовое описание состояния. Значение типа Int.

   - *:in-action* - действие которое выполнится при переходе в данное состояние. Содержит функцию которая принимает поле data из объекта автомата и возвращает новое значение data. 

   - *:out-action* - действие которое выполнится при переходе из данного состояния. Содержит функцию которая принимает поле data из объекта автомата и возвращает новое значение data.

   - *:egdes* - описывает переходы в другие состояния. Представляет массив из hash-map описывающих переход

   - *:type* - тип состояние (конечное, иерархическое и т.д.)

   *Пример информации о состоянии:*

#+NAME: Пример информации о состоянии
#+BEGIN_SRC clojure
{:discription ""
 :in-action (fn [x] x)
 :out-action foo
 :edges [...]
 :type 'normal}
#+END_SRC

*** Описание переходов
    
    В поле *:edges* хранятся hash-map с такими ключами:

   - *:state* - состояние в которое происходит переход

   - *:valid?* - проверка на то является ли переход в это состояние валидным или нет. Содержит функцию которая принимает поле data из объекта автомата и возвращает булево значение.

#+NAME: Пример описания перехода
#+BEGIN_SRC clojure
{:state b
 :valid? (fn [x] True)}
#+END_SRC


